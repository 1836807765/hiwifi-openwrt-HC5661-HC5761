--- a/iwpriv_lua.c	1970-01-01 08:00:00.000000000 +0800
+++ b/iwpriv_lua.c	2014-05-18 16:03:45.416000000 +0800
@@ -0,0 +1,571 @@
+/******************************************************************************
+ *
+ * Copyright (c) 2013 Beijing Geek-geek Technology Co., Ltd.
+ * All rights reserved.
+ *
+ * This is UNPUBLISHED PROPRIETARY SOURCE CODE of Geek-geek Corporation;
+ * the contents of this file may not be disclosed to third parties, copied
+ * or duplicated in any form, in whole or in part, without the prior
+ * written permission of Geek-geek Corporation.
+ *
+ * FILE NAME  :   iw_lua.c
+ * VERSION    :   1.0
+ * DESCRIPTION:   Wireless Information Library - Lua Bindings.
+ * AUTHOR     :	  Abu Cheng
+ *
+ ******************************************************************************/
+#include <lua.h>
+#include <lualib.h>
+#include <lauxlib.h>
+
+#include "iwlib.h"		/* Header */
+
+typedef struct
+{
+	u_int8_t		cnt;
+	u_int8_t  		macaddr[64][6];
+} mac_list_t;
+
+typedef struct
+{
+	u_int8_t		mac[6];	 /*STA µÄMACµØÖ·*/
+	u_int8_t		ccq;
+	u_int8_t		rpt;
+	u_int8_t		rxs;
+} sta_entry_t;
+
+typedef struct
+{
+	u_int8_t		cnt;
+	sta_entry_t  	entry[64];
+} sta_list_t;
+
+typedef struct lua_cmd lua_cmd_t;
+typedef int (lua_func_t)(lua_State *L, const char *ifname, lua_cmd_t *cmd, const char *argv);
+
+struct lua_cmd
+{
+	const char *name;
+	const char *cmdname;
+	const char *argv;
+	const char *defv;
+	lua_func_t *func;
+};
+
+u_char	buffer[4096];	/* Only that big in v25 and later */
+
+static int cmd_split(const char *cmd, char *argv[], int num)
+{
+	char *p;
+	int i;
+
+	for(i=0; i<num; i++)
+		argv[i] = NULL;
+
+	p = cmd;
+	i = 0;
+	while(i<num)
+	{
+		/* find the first NOT SPACE CHAR */
+		while(*p==' '&&*p!=0)
+		{
+			p++;
+		}
+		if(*p == 0)
+			break;
+		
+		argv[i++] = p;		
+
+		while(*p!=' '&&*p!=0)
+		{
+			p++;
+		}
+		if(*p==0)
+			break;
+		
+		*p = 0;
+		p++;
+	}
+	return i;
+}
+
+static int
+lua_set_cmd(lua_State *L, const char *ifname, lua_cmd_t *cmd, const  char *argv)
+{
+	int err = 0;
+	int skfd;		/* generic raw socket desc.	*/
+	char args[128];
+	struct iwreq	wrq;
+	iwprivargs *	priv;
+	int		number;		/* Max of private ioctl */
+	int		i = 0;		/* Start with first command arg */
+	int		k;		/* Index in private description table */
+
+	/* Create a channel to the NET kernel. */
+	if((skfd = iw_sockets_open()) < 0)
+	{
+		perror("socket");
+		return(-1);
+	}
+
+	strncpy(wrq.ifr_name, ifname, IFNAMSIZ);
+	strcpy(args, cmd->argv);
+	if (NULL != argv)
+	{
+		strcat(args, argv);
+	}
+
+	/* Read the private ioctls */
+	number = iw_get_priv_info(skfd, wrq.ifr_name, &priv);
+	/* Is there any ? */
+	if(number <= 0)
+	{
+		return(-1);
+	}
+
+	/* Search the correct ioctl */
+	k = -1;
+	while((++k < number) && strcmp(priv[k].name, cmd->cmdname));
+
+	/* Size of the string to fetch */
+	wrq.u.data.length = strlen(args) + 1;
+	if(wrq.u.data.length > (priv[k].set_args & IW_PRIV_SIZE_MASK))
+		wrq.u.data.length = priv[k].set_args & IW_PRIV_SIZE_MASK;
+
+	/* Fetch string */
+	memcpy(buffer, args, wrq.u.data.length);
+	buffer[wrq.u.data.length] = '\0';
+
+	wrq.u.data.pointer = (caddr_t) buffer;
+	wrq.u.data.flags = 0;
+
+	/* Perform the private ioctl */
+	if(ioctl(skfd, priv[k].cmd, &wrq) < 0)
+	{
+		return(-1);
+	}
+
+	free(priv);
+
+	/* Close the socket. */
+	iw_sockets_close(skfd);
+
+	return err;
+}
+
+static int
+lua_get_cmd(lua_State *L, const char *ifname, lua_cmd_t *cmd, const  char *argv)
+{
+	int ret;
+	memset(buffer, 0, sizeof(buffer));
+	ret = lua_set_cmd(L, ifname, cmd, argv);
+	if (0 != ret)
+	{
+		lua_pushstring(L, cmd->defv);
+	}
+	else
+	{
+		lua_pushstring(L, buffer);
+	}
+
+	return ret;
+}
+
+static int
+lua_get_acllist(lua_State *L, const char *ifname, lua_cmd_t *cmd, const  char *argv)
+{
+	int i, ret;
+	mac_list_t *mac_list;
+	u_int8_t macaddr[6] = {0};
+	char macstr[18];
+
+	lua_newtable(L);
+	memset(buffer, 0, sizeof(buffer));
+	ret = lua_set_cmd(L, ifname, cmd, argv);
+	if (0 != ret)
+	{
+		return ret;
+	}
+
+	mac_list = (mac_list_t *)buffer;
+	for (i = 0; i < mac_list->cnt; i++)
+	{
+		lua_newtable(L);
+
+		memcpy(macaddr, mac_list->macaddr[i], 6);
+		sprintf(macstr, "%02X:%02X:%02X:%02X:%02X:%02X",
+		macaddr[0],macaddr[1],macaddr[2], macaddr[3],macaddr[4],macaddr[5]);
+
+		lua_pushstring(L, macstr);
+		lua_setfield(L, -2, "macaddr");
+
+		lua_rawseti(L, -2, i+1);
+	}
+
+	return ret;
+}
+
+static int
+lua_get_aplist(lua_State *L, const char *ifname, lua_cmd_t *cmd, const  char *argv)
+{
+	FILE *fp;
+	char *ptr;
+	char channel[4], ssid[33], bssid[20], security[23];
+	char signal[9], mode[7], ext_ch[7], net_type[3];
+	int i = 1, space_start;
+	int len;
+
+	lua_newtable(L);
+	if(!(fp = popen("iwpriv ra0 get_site_survey", "r")))
+	{
+		fprintf(stderr, "%s: execute get_site_survey failed !\n", __func__);
+		return -1;
+	}
+
+	memset(buffer, 0, sizeof(buffer));
+	fgets(buffer, sizeof(buffer), fp);
+	fgets(buffer, sizeof(buffer), fp);
+	while (fgets(buffer, sizeof(buffer), fp))
+	{
+		if (strlen(buffer) < 4)
+			break;
+		ptr = buffer;
+		sscanf(ptr, "%s %d", channel, &len);
+		ptr += 41;
+		sscanf(ptr, "%s %s %s %s %s %s", bssid, security, signal, mode, ext_ch, net_type);
+		if (strstr(security, "WEP") || (strstr(security, "TKIP") && !strstr(security, "AES")))
+		{
+			continue;
+		}
+
+		memcpy(ssid, buffer+8, len);
+		ssid[len] = 0;
+
+		lua_newtable(L);
+		lua_pushstring(L, bssid);
+		lua_setfield(L, -2, "bssid");
+
+		lua_pushstring(L, ssid);
+		lua_setfield(L, -2, "ssid");
+
+		lua_pushstring(L, signal);
+		lua_setfield(L, -2, "rssi");
+
+		lua_pushstring(L, channel);
+		lua_setfield(L, -2, "channel");
+
+		lua_pushstring(L, mode);
+		lua_setfield(L, -2, "bgn_mode");
+
+		if (!strcmp(security, "NONE"))
+		{
+			lua_pushstring(L, "none");
+			lua_setfield(L, -2, "auth");
+		}
+		else if (!strncmp(security, "WPA2PSK", 7) ||
+				!strncmp(security, "WPA1PSKWPA2PSK", 14))
+		{
+			lua_pushstring(L, "psk2");
+			lua_setfield(L, -2, "auth");
+		}
+		else if (!strncmp(security, "WPAPSK", 6))
+		{
+			lua_pushstring(L, "psk");
+			lua_setfield(L, -2, "auth");
+		}
+		else
+		{
+			lua_pushstring(L, "wep");
+			lua_setfield(L, -2, "auth");
+		}
+
+		lua_pushstring(L, strcmp(ext_ch, "NONE") ? "40MHz" : "20MHz");
+		lua_setfield(L, -2, "cwm");
+
+		lua_rawseti(L, -2, i++);
+	}
+	pclose(fp);
+	return 0;
+}
+
+static int
+lua_get_stalist(lua_State *L, const char *ifname, lua_cmd_t *cmd, const  char *argv)
+{
+	int i, ret;
+	sta_list_t *stalist;
+	u_int8_t macaddr[6] = {0};
+	char macstr[18];
+
+	lua_newtable(L);
+
+	memset(buffer, 0, sizeof(buffer));
+	ret = lua_set_cmd(L, ifname, cmd, argv);
+	if (0 != ret)
+	{
+		return ret;
+	}
+
+	stalist = (sta_list_t *)buffer;
+	for (i = 0; i < stalist->cnt; i++)
+	{
+		lua_newtable(L);
+
+		memcpy(macaddr, stalist->entry[i].mac, 6);
+		sprintf(macstr, "%02X:%02X:%02X:%02X:%02X:%02X",
+		macaddr[0],macaddr[1],macaddr[2], macaddr[3],macaddr[4],macaddr[5]);
+
+		lua_pushstring(L, macstr);
+		lua_setfield(L, -2, "macaddr");
+
+		lua_pushboolean(L, stalist->entry[i].rpt);
+		lua_setfield(L, -2, "rpt");
+
+		lua_pushnumber(L, stalist->entry[i].ccq);
+		lua_setfield(L, -2, "ccq");
+
+		lua_rawseti(L, -2, i+1);
+	}
+
+	return ret;
+}
+
+static int
+lua_get_newsta(lua_State *L, const char *ifname, lua_cmd_t *cmd, const  char *argv)
+{
+	int i, ret;
+	sta_list_t *stalist;
+	u_int8_t macaddr[6] = {0};
+	char strlist[1024];
+
+	memset(strlist, 0, sizeof(strlist));
+	memset(buffer, 0, sizeof(buffer));
+	ret = lua_set_cmd(L, ifname, cmd, argv);
+	if (0 != ret)
+	{
+		lua_pushstring(L, cmd->defv);
+		return ret;
+	}
+
+	stalist = (sta_list_t *)buffer;
+	for (i = 0; i < stalist->cnt; i++)
+	{
+		memcpy(macaddr, stalist->entry[i].mac, 6);
+		snprintf(strlist, sizeof(strlist),"%s%02X:%02X:%02X:%02X:%02X:%02X %d\n", strlist,
+		macaddr[0],macaddr[1],macaddr[2], macaddr[3],macaddr[4],macaddr[5], stalist->entry[i].rxs);
+	}
+
+	lua_pushstring(L, strlist);
+
+	return ret;
+}
+
+static int
+lua_get_prblist(lua_State *L, const char *ifname, lua_cmd_t *cmd, const  char *argv)
+{
+	int i, ret;
+	sta_list_t *stalist;
+	u_int8_t macaddr[6] = {0};
+	char macstr[18];
+
+	lua_newtable(L);
+
+	memset(buffer, 0, sizeof(buffer));
+	ret = lua_set_cmd(L, ifname, cmd, argv);
+	if (0 != ret)
+	{
+		return ret;
+	}
+
+	stalist = (sta_list_t *)buffer;
+	for (i = 0; i < stalist->cnt; i++)
+	{
+		lua_newtable(L);
+
+		memcpy(macaddr, stalist->entry[i].mac, 6);
+		sprintf(macstr, "%02X:%02X:%02X:%02X:%02X:%02X",
+		macaddr[0],macaddr[1],macaddr[2], macaddr[3],macaddr[4],macaddr[5]);
+
+		lua_pushstring(L, macstr);
+		lua_setfield(L, -2, "macaddr");
+
+		lua_pushnumber(L, (int8_t)stalist->entry[i].ccq);
+		lua_setfield(L, -2, "rssi");
+
+		lua_rawseti(L, -2, i+1);
+	}
+
+	return ret;
+}
+
+static int
+lua_set_acl(lua_State *L, const char *ifname, lua_cmd_t *cmd, const char *argv)
+{
+	int ret;
+	char val[8];
+
+	if (!strcmp(argv, "allow"))
+	{
+		strcpy(val, "1");
+	}
+	else if (!strcmp(argv, "deny"))
+	{
+		strcpy(val, "2");
+	} 
+	else
+	{
+		strcpy(val, "0");
+	}
+
+	ret = lua_set_cmd(L, ifname, cmd, val);
+
+	return ret;
+}
+
+static int
+lua_set_acllist(lua_State *L, const char *ifname, lua_cmd_t *cmd, const char *argv)
+{
+	char policy[8];
+	char *nargv[128];
+	char **args;
+	struct lua_cmd tcmd;
+
+	cmd_split(argv, (char **)nargv, 128);
+	args = (char **)nargv;
+
+	tcmd.cmdname = "show";
+	tcmd.argv = "Aclshow";
+	lua_set_cmd(L, ifname, &tcmd, NULL);
+	strcpy(policy, buffer);
+
+	/* disable acl */
+	tcmd.cmdname = "set";
+	tcmd.argv = "AccessPolicy=";
+	lua_set_acl(L, ifname, &tcmd, "none");
+
+	/* clear list */
+	tcmd.argv = "ACLClearAll=";
+	lua_set_cmd(L, ifname, &tcmd, "1");
+
+	while (*args)
+	{
+		lua_set_cmd(L, ifname, cmd, *args);
+		args++;
+	}
+
+	/* enable acl */
+	tcmd.argv = "AccessPolicy=";
+	lua_set_acl(L, ifname, &tcmd, policy);
+
+	return 0;
+}
+
+static int
+lua_acl_chk(lua_State *L, const char *ifname, lua_cmd_t *cmd, const char *argv)
+{
+	return 0;
+}
+
+struct lua_cmd l_cmds[] = 
+{
+	{ "scan", "set", "SiteSurvey=1", "", lua_set_cmd },
+	{ "aclchk", "set", "aclchk", "", lua_acl_chk },
+	{ "led", "set", "led=", "", lua_set_cmd },
+	{ "acl", "set", "AccessPolicy=", "", lua_set_acl },
+	{ "acllist", "set", "ACLAddEntry=", "", lua_set_acllist },
+	{ NULL, NULL, NULL }
+};
+
+struct lua_cmd l_get_cmds[] = 
+{
+	{ "ch", "show", "Channel", "0", lua_get_cmd },
+	{ "ctq", "show", "ctq", "0", lua_get_cmd },
+	{ "acl", "show", "Aclshow", "open", lua_get_cmd },
+	{ "status", "show", "status", "0", lua_get_cmd },
+	{ "aplist", "get_site_survey", "", "", lua_get_aplist },
+	{ "stalist", "show", "stalist", "", lua_get_stalist },
+	{ "acllist", "show", "acllist", "", lua_get_acllist },
+	{ "prblist", "show", "prblist", "", lua_get_prblist },
+	{ "newcnt", "show", "newcnt", "0", lua_get_cmd },
+	{ "newsta", "show", "newsta", "", lua_get_newsta },
+	{ NULL, NULL, NULL }
+};
+
+static int iw_L_ctl(lua_State *L)
+{
+	const char *ifname = luaL_checkstring(L, 1);
+	const char *command = luaL_checkstring(L, 2);
+	struct lua_cmd *cmd = NULL;
+
+	/* search for command */
+	for (cmd = l_cmds; cmd->name && strcmp(cmd->name, command); cmd++);
+
+	if (NULL != cmd->name)
+	{
+		(*cmd->func)(L, ifname, cmd, NULL);
+	}
+
+	lua_pushnil(L);
+
+	return 1;
+}
+
+static int iw_L_get(lua_State *L)
+{
+	const char *ifname = luaL_checkstring(L, 1);
+	const char *command = luaL_checkstring(L, 2);
+	lua_cmd_t defcmd;
+	struct lua_cmd *cmd = NULL;
+	int ret = -1;
+
+	/* search for command */
+	for (cmd = l_get_cmds; cmd->name && strcmp(cmd->name, command); cmd++);
+
+	if (NULL != cmd->name)
+	{
+		ret = (*cmd->func)(L, ifname, cmd, NULL);
+	}
+	else
+	{
+		defcmd.name = command;
+		defcmd.cmdname = "show";
+		defcmd.argv = command;
+		defcmd.defv = "0";
+		defcmd.func = lua_get_cmd;
+		ret = lua_get_cmd(L, ifname, &defcmd, NULL);
+	}
+
+	return 1;
+}
+
+static int iw_L_set(lua_State *L)
+{
+	const char *ifname = luaL_checkstring(L, 1);
+	const char *command = luaL_checkstring(L, 2);
+	const char *argv = luaL_checkstring(L, 3);
+	struct lua_cmd *cmd = NULL;
+
+	/* search for command */
+	for (cmd = l_cmds; cmd->name && strcmp(cmd->name, command); cmd++);
+
+	if (NULL != cmd->name)
+	{
+		(*cmd->func)(L, ifname, cmd, argv);
+	}
+
+	lua_pushnil(L);	
+
+	return 1;
+}
+
+static const luaL_reg R_hcwifi[] = {
+	{ "ctl", iw_L_ctl },
+	{ "get", iw_L_get },
+	{ "set", iw_L_set },
+	{ NULL, NULL }
+};
+
+LUALIB_API int luaopen_hcwifi(lua_State *L) {
+	luaL_register(L, "hcwifi", R_hcwifi);
+
+	return 1;
+}
