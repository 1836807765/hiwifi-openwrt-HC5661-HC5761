--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -2195,6 +2195,7 @@
 extern int check_disk_change(struct block_device *);
 extern int __invalidate_device(struct block_device *, bool);
 extern int invalidate_partition(struct gendisk *, int);
+extern void fs_errors_ro_uevent(struct super_block *sb);
 #endif
 unsigned long invalidate_mapping_pages(struct address_space *mapping,
 					pgoff_t start, pgoff_t end);
--- a/include/linux/genhd.h
+++ b/include/linux/genhd.h
@@ -408,6 +408,7 @@
 
 extern void set_device_ro(struct block_device *bdev, int flag);
 extern void set_disk_ro(struct gendisk *disk, int flag);
+extern void fs_set_disk_ro_uevent(struct gendisk *gd, char *envp[]);
 
 static inline int get_disk_ro(struct gendisk *disk)
 {
--- a/block/genhd.c
+++ b/block/genhd.c
@@ -1344,6 +1344,14 @@
 
 EXPORT_SYMBOL(set_disk_ro);
 
+
+void fs_set_disk_ro_uevent(struct gendisk *gd, char *envp[])
+{
+	kobject_uevent_env(&disk_to_dev(gd)->kobj, KOBJ_OFFLINE, envp);
+}
+
+EXPORT_SYMBOL(fs_set_disk_ro_uevent);
+
 int bdev_read_only(struct block_device *bdev)
 {
 	if (!bdev)
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@ -1709,3 +1709,13 @@
 	return res;
 }
 EXPORT_SYMBOL(__invalidate_device);
+
+void fs_errors_ro_uevent(struct super_block *sb)
+{
+	char event[48] = {0};	
+	char *envp[] = { event, NULL };
+
+	snprintf(event, sizeof(event), "FS_DEV=%s", sb->s_id);
+	fs_set_disk_ro_uevent(sb->s_bdev->bd_disk, envp);
+}
+EXPORT_SYMBOL(fs_errors_ro_uevent); 	
--- a/fs/fat/misc.c
+++ b/fs/fat/misc.c
@@ -38,6 +38,7 @@
 		panic("FAT-fs (%s): fs panic from previous error\n", sb->s_id);
 	else if (opts->errors == FAT_ERRORS_RO && !(sb->s_flags & MS_RDONLY)) {
 		sb->s_flags |= MS_RDONLY;
+		fs_errors_ro_uevent(sb);
 		printk(KERN_ERR "FAT-fs (%s): Filesystem has been "
 				"set read-only\n", sb->s_id);
 	}

