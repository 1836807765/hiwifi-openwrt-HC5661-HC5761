--- a/drivers/usb/storage/scsiglue.c
+++ b/drivers/usb/storage/scsiglue.c
@@ -550,8 +550,12 @@
 	/* lots of sg segments can be handled */
 	.sg_tablesize =			SCSI_MAX_SG_CHAIN_SEGMENTS,
 
+#ifdef CONFIG_BCM47XX
+	.max_sectors = 					960,
+#else
 	/* limit the total size of a transfer to 120 KB */
 	.max_sectors =                  240,
+#endif
 
 	/* merge commands... this seems to help performance, but
 	 * periodically someone should test to see which setting is more
--- a/drivers/usb/host/xhci.c	2013-06-02 18:14:24.016000239 +0800
+++ b/drivers/usb/host/xhci.c	2013-06-02 18:24:43.420000233 +0800
@@ -109,6 +109,64 @@
 	return ret;
 }
 
+#ifdef CONFIG_BCM47XX
+int xhci_fake_doorbell(struct xhci_hcd *xhci, int slot_id)
+{
+	unsigned int temp1, ret;
+
+	/* alloc a virt device for slot */
+	if (!xhci_alloc_virt_device(xhci, slot_id, 0, GFP_NOIO)) {
+                xhci_warn(xhci, "Could not allocate xHCI USB device data structures\n");
+		return 1;
+        }
+
+	/* ring fake doorbell for slot_id ep 0 */
+	xhci_ring_ep_doorbell(xhci, slot_id, 0, 0);
+	mdelay(1);
+
+	/* read the status register to check if HSE is set or not? */
+        temp1 = xhci_readl(xhci, &xhci->op_regs->status);
+	xhci_dbg(xhci, "op reg status = %x\n",temp1);
+
+	/* clear HSE if set */
+	if(temp1 & STS_FATAL) {
+		xhci_dbg(xhci, "HSE problem detected\n");
+		temp1 &= ~(0x1fff);
+		temp1 |= STS_FATAL;
+		xhci_dbg(xhci, "temp1=%x\n",temp1);
+		xhci_writel(xhci, temp1, &xhci->op_regs->status);
+		mdelay(1);
+	        temp1 = xhci_readl(xhci, &xhci->op_regs->status);
+        	xhci_dbg(xhci, "After clear op reg status=%x\n", temp1);
+	}
+	
+	/* Free virt device */
+	xhci_free_virt_device(xhci, slot_id);
+
+	/* Run the controller if needed */
+	temp1 = xhci_readl(xhci, &xhci->op_regs->command);
+	if (temp1 & CMD_RUN)
+		return 0;
+	temp1 |= (CMD_RUN);
+
+	xhci_writel(xhci, temp1, &xhci->op_regs->command);
+	/*
+	 * Wait for the HCHalted Status bit to be 0 to indicate the host is running.
+	 */
+	ret = handshake(xhci, &xhci->op_regs->status,
+		STS_HALT, 0, XHCI_MAX_HALT_USEC);
+
+	if (ret == -ETIMEDOUT) {
+		xhci_err(xhci, "Host took too long to start, "
+				"waited %u microseconds.\n",
+				XHCI_MAX_HALT_USEC);
+		return 1;
+	}
+
+	return 0;
+}
+#endif /* CONFIG_BCM47XX */
+
 /*
  * Set the run bit and wait for the host to be running.
  */
@@ -133,6 +191,10 @@
 		xhci_err(xhci, "Host took too long to start, "
 				"waited %u microseconds.\n",
 				XHCI_MAX_HALT_USEC);
+#ifdef CONFIG_BCM47XX
+	xhci_fake_doorbell(xhci, 1);
+#endif /* CONFIG_BCM47XX */
+
 	if (!ret)
 		xhci->xhc_state &= ~XHCI_STATE_HALTED;
 	return ret;
--- a/drivers/usb/host/xhci.h	2013-06-02 18:14:24.016000239 +0800
+++ a/drivers/usb/host/xhci.h	2013-06-02 18:28:29.296000237 +0800
@@ -1223,14 +1223,23 @@
  * since the command ring is 64-byte aligned.
  * It must also be greater than 16.
  */
+#ifdef CONFIG_BCM47XX
+#define TRBS_PER_SEGMENT	128
+#else
 #define TRBS_PER_SEGMENT	64
+#endif
 /* Allow two commands + a link TRB, along with any reserved command TRBs */
 #define MAX_RSVD_CMD_TRBS	(TRBS_PER_SEGMENT - 3)
 #define SEGMENT_SIZE		(TRBS_PER_SEGMENT*16)
 /* SEGMENT_SHIFT should be log2(SEGMENT_SIZE).
  * Change this if you change TRBS_PER_SEGMENT!
  */
+#ifdef CONFIG_BCM47XX
+#define SEGMENT_SHIFT		11
+#else
 #define SEGMENT_SHIFT		10
+#endif
+
 /* TRB buffer pointers can't cross 64KB boundaries */
 #define TRB_MAX_BUFF_SHIFT		16
 #define TRB_MAX_BUFF_SIZE	(1 << TRB_MAX_BUFF_SHIFT)
--- a/drivers/usb/host/xhci-pci.c	2013-06-02 18:14:24.016000239 +0800
+++ b/drivers/usb/host/xhci-pci.c	2013-06-02 18:19:24.956000259 +0800
@@ -107,6 +107,12 @@
 	struct pci_dev		*pdev = to_pci_dev(hcd->self.controller);
 	int			retval;
 
+#ifdef CONFIG_BCM47XX
+	hcd->self.sg_tablesize = (TRBS_PER_SEGMENT - 2) / 2;
+#else
+	hcd->self.sg_tablesize = TRBS_PER_SEGMENT - 2;
+#endif
+
 	retval = xhci_gen_setup(hcd, xhci_pci_quirks);
 	if (retval)
 		return retval;
