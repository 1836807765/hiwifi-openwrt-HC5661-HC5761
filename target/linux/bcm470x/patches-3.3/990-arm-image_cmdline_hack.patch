--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -234,6 +234,10 @@
 	def_bool y
 	depends on BUG
 
+config IMAGE_CMDLINE_HACK
+	bool "HCWIFI specific image command line hack"
+	default n
+	
 source "init/Kconfig"
 
 source "kernel/Kconfig.freezer"
--- a/arch/arm/kernel/head.S
+++ b/arch/arm/kernel/head.S
@@ -62,6 +62,13 @@
 #define KERNEL_START	KERNEL_RAM_VADDR
 #define KERNEL_END	_end
 #endif
+
+#ifdef CONFIG_IMAGE_CMDLINE_HACK
+	.ascii	"CMDLINE:"
+	.global __image_cmdline
+__image_cmdline:
+	.fill 0x400
+#endif /* CONFIG_IMAGE_CMDLINE_HACK */
 
 /*
  * Kernel startup entry point.
--- a/arch/arm/kernel/setup.c
+++ b/arch/arm/kernel/setup.c
@@ -139,6 +139,7 @@
 
 static const char *cpu_name;
 static const char *machine_name;
+static char machine_board_name[256] = "Unknown";
 static char __initdata cmd_line[COMMAND_LINE_SIZE];
 struct machine_desc *machine_desc __initdata;
 
@@ -912,11 +913,27 @@
 	return cmp < 0 ? -1 : cmp > 0 ? 1 : 0;
 }
 
+#ifdef CONFIG_IMAGE_CMDLINE_HACK
+extern char __image_cmdline[];
+static void __init setup_image_cmdline_hack(void)
+{
+	char *p = __image_cmdline;
+
+	if (*p == '\0')
+		return;
+
+	strlcpy(default_command_line, p, COMMAND_LINE_SIZE);
+}
+#else
+static inline void setup_image_cmdline_hack(void) { return; }
+#endif
+
 void __init setup_arch(char **cmdline_p)
 {
 	struct machine_desc *mdesc;
 
 	setup_processor();
+	setup_image_cmdline_hack();
 	mdesc = setup_machine_fdt(__atags_pointer);
 	if (!mdesc)
 		mdesc = setup_machine_tags(machine_arch_type);
@@ -1087,6 +1104,7 @@
 	seq_puts(m, "\n");
 
 	seq_printf(m, "Hardware\t: %s\n", machine_name);
+	seq_printf(m, "machine\t\t: %s\n", machine_board_name);
 	seq_printf(m, "Revision\t: %04x\n", system_rev);
 	seq_printf(m, "Serial\t\t: %08x%08x\n",
 		   system_serial_high, system_serial_low);
@@ -1115,3 +1133,20 @@
 	.stop	= c_stop,
 	.show	= c_show
 };
+
+static __init int arm_machine_board_setup(char *board_name)
+{
+	char *p;
+
+	if(board_name == NULL)
+	{
+		strncpy(machine_board_name, "Unknown", sizeof(machine_board_name) - 1);
+		return 0;
+	}
+
+	strncpy(machine_board_name, board_name, sizeof(machine_board_name) - 1);
+	
+	return 1;
+}
+
+__setup("board=", arm_machine_board_setup);
